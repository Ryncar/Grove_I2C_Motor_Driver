
mega8motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  0080006c  0080006c  00000558  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000020c  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000728  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e3  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ed  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	68 c0       	rjmp	.+208    	; 0xda <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	de c1       	rjmp	.+956    	; 0x3e0 <__vector_17>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 eb       	ldi	r30, 0xB8	; 184
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 39       	cpi	r26, 0x99	; 153
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	83 d0       	rcall	.+262    	; 0x160 <main>
  5a:	2c c2       	rjmp	.+1112   	; 0x4b4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <stepper_run>:
const char motor_data[8] = {0x10,0x30,0x20,0x60,0x40,0xc0,0x80,0x90};
// runs in ISR
void stepper_run()//direction:1 or 0;
{

	MOTOR_PORT=motor_data[step]; //a step to go!
  5e:	20 91 6c 00 	lds	r18, 0x006C
  62:	30 91 6d 00 	lds	r19, 0x006D
  66:	f9 01       	movw	r30, r18
  68:	ed 59       	subi	r30, 0x9D	; 157
  6a:	ff 4f       	sbci	r31, 0xFF	; 255
  6c:	80 81       	ld	r24, Z
  6e:	82 bb       	out	0x12, r24	; 18
	if (stepper_direction == 1)
  70:	80 91 60 00 	lds	r24, 0x0060
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	69 f4       	brne	.+26     	; 0x92 <stepper_run+0x34>
		{
			step++;
  78:	c9 01       	movw	r24, r18
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	90 93 6d 00 	sts	0x006D, r25
  80:	80 93 6c 00 	sts	0x006C, r24
			if (step ==8)
  84:	08 97       	sbiw	r24, 0x08	; 8
  86:	b1 f4       	brne	.+44     	; 0xb4 <stepper_run+0x56>
			step =0;// if direction is 1, 1 step forward.
  88:	10 92 6d 00 	sts	0x006D, r1
  8c:	10 92 6c 00 	sts	0x006C, r1
  90:	08 95       	ret
		}
	else if (stepper_direction == 0)
  92:	88 23       	and	r24, r24
  94:	79 f4       	brne	.+30     	; 0xb4 <stepper_run+0x56>
		{
			step--;
  96:	c9 01       	movw	r24, r18
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	90 93 6d 00 	sts	0x006D, r25
  9e:	80 93 6c 00 	sts	0x006C, r24
			if (step==-1)
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	9f 4f       	sbci	r25, 0xFF	; 255
  a6:	31 f4       	brne	.+12     	; 0xb4 <stepper_run+0x56>
			step=7;//else , 1 step backward.
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 6d 00 	sts	0x006D, r25
  b0:	80 93 6c 00 	sts	0x006C, r24
  b4:	08 95       	ret

000000b6 <steptimer_open>:
	MOTOR_PORT= 0x50;
}*/
void steptimer_open()
{
	unsigned char sreg;
	sreg = SREG;
  b6:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
  b8:	f8 94       	cli
 //timer init
  TCCR2 = 0x05;//clock:8M/128;normal mode, 4ms per interruput
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	85 bd       	out	0x25, r24	; 37
 // TCCR0 = 0x04;
 // TCCR1B |=1<<(CS12)|0<<(CS11)|1<<(CS10);//Set clock 1024/16MHz,unit is 6.4us
  TIMSK|=1<<(TOIE2); //enable overflow interrupt
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	89 bf       	out	0x39, r24	; 57
  TCNT2 = 0;
  c4:	14 bc       	out	0x24, r1	; 36
 
	/* Restore Global Interrupt Flag */
	SREG = sreg;
  c6:	9f bf       	out	0x3f, r25	; 63
	sei();
  c8:	78 94       	sei
}
  ca:	08 95       	ret

000000cc <steptimer_close>:
void steptimer_close()
{
 //time close
  unsigned char sreg;
 	sreg = SREG;
  cc:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
  ce:	f8 94       	cli
 	TIMSK &=0<<(TOIE2);
  d0:	99 b7       	in	r25, 0x39	; 57
  d2:	19 be       	out	0x39, r1	; 57
 	/* Restore Global Interrupt Flag */
	SREG = sreg;
  d4:	8f bf       	out	0x3f, r24	; 63
	sei();
  d6:	78 94       	sei

}
  d8:	08 95       	ret

000000da <__vector_4>:
ISR(TIMER2_OVF_vect)  
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25

   ISRhappened=1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 71 00 	sts	0x0071, r25
  f0:	80 93 70 00 	sts	0x0070, r24

}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <DelayMs>:
////////////////

//unsigned char *slave_add = 0x0f;

void DelayMs(uint16_t ms)
{
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	42 ee       	ldi	r20, 0xE2	; 226
 108:	54 e0       	ldi	r21, 0x04	; 4
 10a:	05 c0       	rjmp	.+10     	; 0x116 <DelayMs+0x14>
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <DelayMs+0xc>
  uint16_t i;
  for(i=0;i<ms;i++)
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	c0 f3       	brcs	.-16     	; 0x10c <DelayMs+0xa>
    _delay_loop_2(5 * 250);
}                        
 11c:	08 95       	ret

0000011e <pwm_pres_init>:
void pwm_pres_init(unsigned char pres)
{

	unsigned char sreg;
	/* Save Global Interrupt Flag */
	sreg = SREG;
 11e:	2f b7       	in	r18, 0x3f	; 63
	
	cli();
 120:	f8 94       	cli

   //  set for frequency the top is
   // Timer 1 fast PWM mode 1 
   // Clear on compare, set at TOP 
	TCCR1A = 0xa1;//   TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 122:	91 ea       	ldi	r25, 0xA1	; 161
 124:	9f bd       	out	0x2f, r25	; 47

	TCCR1B = pres;
 126:	8e bd       	out	0x2e, r24	; 46

//	TCNT1 = 0; 

	/* Restore Global Interrupt Flag */
	SREG = sreg;
 128:	2f bf       	out	0x3f, r18	; 63
}
 12a:	08 95       	ret

0000012c <pwm_init>:
void pwm_init(unsigned char pwma,unsigned char pwmb)
{

	unsigned char sreg;
	//Save Global Interrupt Flag 
	sreg = SREG;
 12c:	2f b7       	in	r18, 0x3f	; 63
	
	cli();
 12e:	f8 94       	cli

	OCR1A = pwma; 
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9b bd       	out	0x2b, r25	; 43
 134:	8a bd       	out	0x2a, r24	; 42
    OCR1B = pwmb;
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	79 bd       	out	0x29, r23	; 41
 13a:	68 bd       	out	0x28, r22	; 40

//	TCNT1 = 0; 

	//Restore Global Interrupt Flag 
	SREG = sreg;
 13c:	2f bf       	out	0x3f, r18	; 63
}
 13e:	08 95       	ret

00000140 <pin_init>:

void pin_init() //define pins
{
  	MOTOR_DDR = 0xF0;//I1,I2,I3,I4 outputs
 140:	80 ef       	ldi	r24, 0xF0	; 240
 142:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0xF0;
 144:	82 bb       	out	0x12, r24	; 18
	DDRB|=_BV(PB1)|_BV(PB2);//OC1A, OC1B outputs
 146:	87 b3       	in	r24, 0x17	; 23
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	87 bb       	out	0x17, r24	; 23
//	DDRB = 0x06;
	
}
 14c:	08 95       	ret

0000014e <MotorAddSet>:

void MotorAddSet()
{
	motorAddSet_DDR = 0x00;
 14e:	14 ba       	out	0x14, r1	; 20
	motorAddSet_PORT = 0x0f;
 150:	8f e0       	ldi	r24, 0x0F	; 15
 152:	85 bb       	out	0x15, r24	; 21
	TWI_Slave_Initialise((~motorAddSet_PIN & 0x0f)<<1);
 154:	83 b3       	in	r24, 0x13	; 19
 156:	80 95       	com	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	88 0f       	add	r24, r24
 15c:	eb d0       	rcall	.+470    	; 0x334 <TWI_Slave_Initialise>
}
 15e:	08 95       	ret

00000160 <main>:

int main(void)
{
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <main+0x10>
 170:	00 d0       	rcall	.+0      	; 0x172 <main+0x12>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	SREG = sreg;
}

void pin_init() //define pins
{
  	MOTOR_DDR = 0xF0;//I1,I2,I3,I4 outputs
 176:	80 ef       	ldi	r24, 0xF0	; 240
 178:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0xF0;
 17a:	82 bb       	out	0x12, r24	; 18
	DDRB|=_BV(PB1)|_BV(PB2);//OC1A, OC1B outputs
 17c:	87 b3       	in	r24, 0x17	; 23
 17e:	86 60       	ori	r24, 0x06	; 6
 180:	87 bb       	out	0x17, r24	; 23
void pwm_pres_init(unsigned char pres)
{

	unsigned char sreg;
	/* Save Global Interrupt Flag */
	sreg = SREG;
 182:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 184:	f8 94       	cli

   //  set for frequency the top is
   // Timer 1 fast PWM mode 1 
   // Clear on compare, set at TOP 
	TCCR1A = 0xa1;//   TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 186:	81 ea       	ldi	r24, 0xA1	; 161
 188:	8f bd       	out	0x2f, r24	; 47

	TCCR1B = pres;
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	8e bd       	out	0x2e, r24	; 46

//	TCNT1 = 0; 

	/* Restore Global Interrupt Flag */
	SREG = sreg;
 18e:	9f bf       	out	0x3f, r25	; 63
	// 64 prescaler 
	pwm_pres_init(0x03);//TCCR1B = (1<<CS11)|(1<<CS10);//default prescaler 248hz
	
//	pwm_init(127,127);//50%duty 

	sei();
 190:	78 94       	sei

	MotorAddSet();
 192:	dd df       	rcall	.-70     	; 0x14e <MotorAddSet>
		
	TWI_Start_Transceiver();
 194:	fa d0       	rcall	.+500    	; 0x38a <TWI_Start_Transceiver>
    	{
			if ( TWI_statusReg.lastTransOK )
      		{
				if ( TWI_statusReg.RxDataInBuf )
        		{
					TWI_Get_Data_From_Transceiver( messageBuf, 3);
 196:	7e 01       	movw	r14, r28
 198:	08 94       	sec
 19a:	e1 1c       	adc	r14, r1
 19c:	f1 1c       	adc	r15, r1
	cli();

   //  set for frequency the top is
   // Timer 1 fast PWM mode 1 
   // Clear on compare, set at TOP 
	TCCR1A = 0xa1;//   TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 19e:	31 ea       	ldi	r19, 0xA1	; 161
 1a0:	d3 2e       	mov	r13, r19
	//Save Global Interrupt Flag 
	sreg = SREG;
	
	cli();

	OCR1A = pwma; 
 1a2:	0f ef       	ldi	r16, 0xFF	; 255
 1a4:	10 e0       	ldi	r17, 0x00	; 0
	TWI_Start_Transceiver();

	while(1)
	{

	 if (ISRhappened==1)
 1a6:	80 91 70 00 	lds	r24, 0x0070
 1aa:	90 91 71 00 	lds	r25, 0x0071
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	b9 f5       	brne	.+110    	; 0x220 <main+0xc0>
	 {


	// if (step_nu !=255)
//	if (1)
		if ((step_nu >0)&&(step_nu<255))
 1b2:	90 91 62 00 	lds	r25, 0x0062
 1b6:	89 2f       	mov	r24, r25
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	8e 3f       	cpi	r24, 0xFE	; 254
 1bc:	a8 f4       	brcc	.+42     	; 0x1e8 <main+0x88>
	 {
	 	
	    if (ISRtimes >= stepper_speed)
 1be:	20 91 72 00 	lds	r18, 0x0072
 1c2:	30 91 73 00 	lds	r19, 0x0073
 1c6:	80 91 61 00 	lds	r24, 0x0061
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	28 17       	cp	r18, r24
 1ce:	39 07       	cpc	r19, r25
 1d0:	ec f0       	brlt	.+58     	; 0x20c <main+0xac>
		{
			stepper_run();
 1d2:	45 df       	rcall	.-374    	; 0x5e <stepper_run>
			ISRtimes =0;
 1d4:	10 92 73 00 	sts	0x0073, r1
 1d8:	10 92 72 00 	sts	0x0072, r1
			step_nu = step_nu - 1;
 1dc:	80 91 62 00 	lds	r24, 0x0062
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	80 93 62 00 	sts	0x0062, r24
 1e6:	18 c0       	rjmp	.+48     	; 0x218 <main+0xb8>
			{ISRtimes++;}
					
		ISRhappened=0; 
	//	step_nu = step_nu - 1;
	}
	else if (step_nu ==255)
 1e8:	9f 3f       	cpi	r25, 0xFF	; 255
 1ea:	d1 f4       	brne	.+52     	; 0x220 <main+0xc0>
	{
		    if (ISRtimes >= stepper_speed)
 1ec:	20 91 72 00 	lds	r18, 0x0072
 1f0:	30 91 73 00 	lds	r19, 0x0073
 1f4:	80 91 61 00 	lds	r24, 0x0061
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	28 17       	cp	r18, r24
 1fc:	39 07       	cpc	r19, r25
 1fe:	34 f0       	brlt	.+12     	; 0x20c <main+0xac>
		{
			stepper_run();
 200:	2e df       	rcall	.-420    	; 0x5e <stepper_run>
			ISRtimes =0;
 202:	10 92 73 00 	sts	0x0073, r1
 206:	10 92 72 00 	sts	0x0072, r1
 20a:	06 c0       	rjmp	.+12     	; 0x218 <main+0xb8>
		}
		else 
			{ISRtimes++;}
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	30 93 73 00 	sts	0x0073, r19
 214:	20 93 72 00 	sts	0x0072, r18
					
		ISRhappened=0;
 218:	10 92 71 00 	sts	0x0071, r1
 21c:	10 92 70 00 	sts	0x0070, r1
	 }



		
    	if ( ! TWI_Transceiver_Busy() )                              
 220:	8f d0       	rcall	.+286    	; 0x340 <TWI_Transceiver_Busy>
 222:	88 23       	and	r24, r24
 224:	09 f0       	breq	.+2      	; 0x228 <main+0xc8>
 226:	bf cf       	rjmp	.-130    	; 0x1a6 <main+0x46>
    	{
			if ( TWI_statusReg.lastTransOK )
      		{
				if ( TWI_statusReg.RxDataInBuf )
 228:	80 91 74 00 	lds	r24, 0x0074
 22c:	83 70       	andi	r24, 0x03	; 3
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	09 f0       	breq	.+2      	; 0x234 <main+0xd4>
 232:	b9 cf       	rjmp	.-142    	; 0x1a6 <main+0x46>
        		{
					TWI_Get_Data_From_Transceiver( messageBuf, 3);
 234:	c7 01       	movw	r24, r14
 236:	63 e0       	ldi	r22, 0x03	; 3
 238:	b3 d0       	rcall	.+358    	; 0x3a0 <TWI_Get_Data_From_Transceiver>
					switch( messageBuf[0] )
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	82 38       	cpi	r24, 0x82	; 130
 23e:	11 f1       	breq	.+68     	; 0x284 <main+0x124>
 240:	83 38       	cpi	r24, 0x83	; 131
 242:	50 f4       	brcc	.+20     	; 0x258 <main+0xf8>
 244:	8b 31       	cpi	r24, 0x1B	; 27
 246:	09 f4       	brne	.+2      	; 0x24a <main+0xea>
 248:	6c c0       	rjmp	.+216    	; 0x322 <main+0x1c2>
 24a:	8c 31       	cpi	r24, 0x1C	; 28
 24c:	09 f4       	brne	.+2      	; 0x250 <main+0xf0>
 24e:	65 c0       	rjmp	.+202    	; 0x31a <main+0x1ba>
 250:	8a 31       	cpi	r24, 0x1A	; 26
 252:	09 f0       	breq	.+2      	; 0x256 <main+0xf6>
 254:	6c c0       	rjmp	.+216    	; 0x32e <main+0x1ce>
 256:	4d c0       	rjmp	.+154    	; 0x2f2 <main+0x192>
 258:	81 3a       	cpi	r24, 0xA1	; 161
 25a:	f9 f0       	breq	.+62     	; 0x29a <main+0x13a>
 25c:	82 3a       	cpi	r24, 0xA2	; 162
 25e:	20 f4       	brcc	.+8      	; 0x268 <main+0x108>
 260:	84 38       	cpi	r24, 0x84	; 132
 262:	09 f0       	breq	.+2      	; 0x266 <main+0x106>
 264:	64 c0       	rjmp	.+200    	; 0x32e <main+0x1ce>
 266:	33 c0       	rjmp	.+102    	; 0x2ce <main+0x16e>
 268:	85 3a       	cpi	r24, 0xA5	; 165
 26a:	19 f1       	breq	.+70     	; 0x2b2 <main+0x152>
 26c:	8a 3a       	cpi	r24, 0xAA	; 170
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0x112>
 270:	5e c0       	rjmp	.+188    	; 0x32e <main+0x1ce>
					{
						case 0xaa:  MOTOR_PORT = (messageBuf[1]&0x0f)<<4;break;
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	24 e0       	ldi	r18, 0x04	; 4
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	2a 95       	dec	r18
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x118>
 280:	82 bb       	out	0x12, r24	; 18
 282:	56 c0       	rjmp	.+172    	; 0x330 <main+0x1d0>
void pwm_init(unsigned char pwma,unsigned char pwmb)
{

	unsigned char sreg;
	//Save Global Interrupt Flag 
	sreg = SREG;
 284:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
 286:	f8 94       	cli

	OCR1A = pwma; 
 288:	2a 81       	ldd	r18, Y+2	; 0x02
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	3b bd       	out	0x2b, r19	; 43
 28e:	2a bd       	out	0x2a, r18	; 42
    OCR1B = pwmb;
 290:	2b 81       	ldd	r18, Y+3	; 0x03
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	39 bd       	out	0x29, r19	; 41
 296:	28 bd       	out	0x28, r18	; 40
 298:	23 c0       	rjmp	.+70     	; 0x2e0 <main+0x180>
						}	
						break;  					            
*/
						case 0xa1:  
						{
							pinBuf = MOTOR_PIN&0xc0;
 29a:	90 b3       	in	r25, 0x10	; 16
							MOTOR_PORT = ((messageBuf[1]<<4)&0x30)|pinBuf;
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	82 95       	swap	r24
 2a0:	80 73       	andi	r24, 0x30	; 48
 2a2:	90 7c       	andi	r25, 0xC0	; 192
 2a4:	89 2b       	or	r24, r25
 2a6:	82 bb       	out	0x12, r24	; 18
							OCR1A = messageBuf[2];
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9b bd       	out	0x2b, r25	; 43
 2ae:	8a bd       	out	0x2a, r24	; 42
 2b0:	3f c0       	rjmp	.+126    	; 0x330 <main+0x1d0>
						}
						break;
					      	
						case 0xa5:  
						{
							pinBuf = MOTOR_PIN&0x30; 
 2b2:	90 b3       	in	r25, 0x10	; 16
							MOTOR_PORT = ((messageBuf[1]<<6)&0xc0)|pinBuf;
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	82 95       	swap	r24
 2b8:	88 0f       	add	r24, r24
 2ba:	88 0f       	add	r24, r24
 2bc:	80 7c       	andi	r24, 0xC0	; 192
 2be:	90 73       	andi	r25, 0x30	; 48
 2c0:	89 2b       	or	r24, r25
 2c2:	82 bb       	out	0x12, r24	; 18
							OCR1B = messageBuf[2];
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	99 bd       	out	0x29, r25	; 41
 2ca:	88 bd       	out	0x28, r24	; 40
 2cc:	31 c0       	rjmp	.+98     	; 0x330 <main+0x1d0>
						}
						break;
					      	
						case 0x84:  
						{
							if( 0 < messageBuf[1]&&messageBuf[1] < 6 )
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	89 2f       	mov	r24, r25
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	85 30       	cpi	r24, 0x05	; 5
 2d6:	30 f4       	brcc	.+12     	; 0x2e4 <main+0x184>
void pwm_pres_init(unsigned char pres)
{

	unsigned char sreg;
	/* Save Global Interrupt Flag */
	sreg = SREG;
 2d8:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
 2da:	f8 94       	cli

   //  set for frequency the top is
   // Timer 1 fast PWM mode 1 
   // Clear on compare, set at TOP 
	TCCR1A = 0xa1;//   TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 2dc:	df bc       	out	0x2f, r13	; 47

	TCCR1B = pres;
 2de:	9e bd       	out	0x2e, r25	; 46

//	TCNT1 = 0; 

	/* Restore Global Interrupt Flag */
	SREG = sreg;
 2e0:	8f bf       	out	0x3f, r24	; 63
 2e2:	26 c0       	rjmp	.+76     	; 0x330 <main+0x1d0>
void pwm_pres_init(unsigned char pres)
{

	unsigned char sreg;
	/* Save Global Interrupt Flag */
	sreg = SREG;
 2e4:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 2e6:	f8 94       	cli

   //  set for frequency the top is
   // Timer 1 fast PWM mode 1 
   // Clear on compare, set at TOP 
	TCCR1A = 0xa1;//   TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 2e8:	df bc       	out	0x2f, r13	; 47

	TCCR1B = pres;
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	8e bd       	out	0x2e, r24	; 46

//	TCNT1 = 0; 

	/* Restore Global Interrupt Flag */
	SREG = sreg;
 2ee:	9f bf       	out	0x3f, r25	; 63
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <main+0x1d0>
}
void steptimer_close()
{
 //time close
  unsigned char sreg;
 	sreg = SREG;
 2f2:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
 2f4:	f8 94       	cli
 	TIMSK &=0<<(TOIE2);
 2f6:	99 b7       	in	r25, 0x39	; 57
 2f8:	19 be       	out	0x39, r1	; 57
 	/* Restore Global Interrupt Flag */
	SREG = sreg;
 2fa:	8f bf       	out	0x3f, r24	; 63
	sei();
 2fc:	78 94       	sei
						
						//for stepper:
						case 0x1a://enable the stepper;
						{   
						    steptimer_close();
						    stepper_direction = messageBuf[1];
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	80 93 60 00 	sts	0x0060, r24
							stepper_speed = messageBuf[2];
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	80 93 61 00 	sts	0x0061, r24
							
							steptimer_open();
 30a:	d5 de       	rcall	.-598    	; 0xb6 <steptimer_open>
void pwm_init(unsigned char pwma,unsigned char pwmb)
{

	unsigned char sreg;
	//Save Global Interrupt Flag 
	sreg = SREG;
 30c:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
 30e:	f8 94       	cli

	OCR1A = pwma; 
 310:	1b bd       	out	0x2b, r17	; 43
 312:	0a bd       	out	0x2a, r16	; 42
    OCR1B = pwmb;
 314:	19 bd       	out	0x29, r17	; 41
 316:	08 bd       	out	0x28, r16	; 40
 318:	e3 cf       	rjmp	.-58     	; 0x2e0 <main+0x180>
							
						}        
				      	break;
						case 0x1c://set the steper number
						{   
							step_nu = messageBuf[1];
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	80 93 62 00 	sts	0x0062, r24
 320:	07 c0       	rjmp	.+14     	; 0x330 <main+0x1d0>
}
void steptimer_close()
{
 //time close
  unsigned char sreg;
 	sreg = SREG;
 322:	8f b7       	in	r24, 0x3f	; 63
	
	cli();
 324:	f8 94       	cli
 	TIMSK &=0<<(TOIE2);
 326:	99 b7       	in	r25, 0x39	; 57
 328:	19 be       	out	0x39, r1	; 57
 	/* Restore Global Interrupt Flag */
	SREG = sreg;
 32a:	8f bf       	out	0x3f, r24	; 63
	sei();
 32c:	78 94       	sei
						//	stepper_close();

						}
						default:   
						{
							asm( "NOP" );// Do nothing 
 32e:	00 00       	nop
						}
						break;
					}
					
					TWI_Start_Transceiver();
 330:	2c d0       	rcall	.+88     	; 0x38a <TWI_Start_Transceiver>
 332:	39 cf       	rjmp	.-398    	; 0x1a6 <main+0x46>

00000334 <TWI_Slave_Initialise>:
 * The TWI module is configured to NACK on any requests. Use a TWI_Start_Transceiver function to 
 * start the TWI.
 * ---------------------------------------------------------------------------------------------- */
void TWI_Slave_Initialise( unsigned char TWI_ownAddress )
{
  TWAR = TWI_ownAddress;                            // Set own TWI slave address. Accept TWI General Calls.
 334:	82 b9       	out	0x02, r24	; 2
  TWDR = 0xFF;                                      // Default content = SDA released.
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	83 b9       	out	0x03, r24	; 3
  TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins.
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	86 bf       	out	0x36, r24	; 54
         (0<<TWIE)|(0<<TWINT)|                      // Disable TWI Interupt.
         (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Do not ACK on any requests, yet.
         (0<<TWWC);                                 //
}    
 33e:	08 95       	ret

00000340 <TWI_Transceiver_Busy>:
 * Call this function to test if the TWI_ISR is busy transmitting.
 * ---------------------------------------------------------------------------------------------- */
unsigned char TWI_Transceiver_Busy( void )
{
    // IF TWI interrupt is enabled then the Transceiver is busy
    return ( TWCR & (1<<TWIE) );
 340:	86 b7       	in	r24, 0x36	; 54
}
 342:	81 70       	andi	r24, 0x01	; 1
 344:	08 95       	ret

00000346 <TWI_Get_State_Info>:
 * hold execution (loop) until the TWI_ISR has completed with the previous operation. If there was
 * an error, then the function will return the TWI State code.
 * ---------------------------------------------------------------------------------------------- */
unsigned char TWI_Get_State_Info( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI has completed the transmission.
 346:	06 b6       	in	r0, 0x36	; 54
 348:	00 fc       	sbrc	r0, 0
 34a:	fd cf       	rjmp	.-6      	; 0x346 <TWI_Get_State_Info>
  return ( TWI_state );                         // Return error state. 
}
 34c:	80 91 6b 00 	lds	r24, 0x006B
 350:	08 95       	ret

00000352 <TWI_Start_Transceiver_With_Data>:
 * function, the Address byte is not included in the message buffers.
 * The function will hold execution (loop) until the TWI_ISR has completed with the previous operation,
 * then initialize the next operation and return.
 * ---------------------------------------------------------------------------------------------- */
void TWI_Start_Transceiver_With_Data( unsigned char *msg, unsigned char msgSize )
{
 352:	48 2f       	mov	r20, r24
 354:	29 2f       	mov	r18, r25
    unsigned char temp;
    
    // Wait until TWI is ready for next transmission.
    while ( TWI_Transceiver_Busy() );
 356:	06 b6       	in	r0, 0x36	; 54
 358:	00 fc       	sbrc	r0, 0
 35a:	fd cf       	rjmp	.-6      	; 0x356 <TWI_Start_Transceiver_With_Data+0x4>
    
    // Number of data to transmit.
    TWI_msgSize = msgSize;
 35c:	60 93 75 00 	sts	0x0075, r22
 360:	a7 e7       	ldi	r26, 0x77	; 119
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	84 2f       	mov	r24, r20
 366:	92 2f       	mov	r25, r18
 368:	9c 01       	movw	r18, r24
 36a:	f9 01       	movw	r30, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <TWI_Start_Transceiver_With_Data+0x20>
    
    // Copy data that may be transmitted if the TWI Master requests data.
    for ( temp = 0; temp < msgSize; temp++ )
    {
        TWI_buf[ temp ] = msg[ temp ];
 36e:	81 91       	ld	r24, Z+
 370:	8d 93       	st	X+, r24
    
    // Number of data to transmit.
    TWI_msgSize = msgSize;
    
    // Copy data that may be transmitted if the TWI Master requests data.
    for ( temp = 0; temp < msgSize; temp++ )
 372:	8e 2f       	mov	r24, r30
 374:	84 1b       	sub	r24, r20
 376:	86 17       	cp	r24, r22
 378:	d0 f3       	brcs	.-12     	; 0x36e <TWI_Start_Transceiver_With_Data+0x1c>
    {
        TWI_buf[ temp ] = msg[ temp ];
    }
    
    TWI_statusReg.all = 0;      
 37a:	10 92 74 00 	sts	0x0074, r1
    TWI_state         = TWI_NO_STATE ;
 37e:	88 ef       	ldi	r24, 0xF8	; 248
 380:	80 93 6b 00 	sts	0x006B, r24
    TWCR = (1<<TWEN)|                             // TWI Interface enabled.
 384:	85 ec       	ldi	r24, 0xC5	; 197
 386:	86 bf       	out	0x36, r24	; 54
           (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
           (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|       // Prepare to ACK next time the Slave is addressed.
           (0<<TWWC);                             //
}
 388:	08 95       	ret

0000038a <TWI_Start_Transceiver>:
 * initialize the next operation and return.
* ----------------------------------------------------------------------------------------------- */
void TWI_Start_Transceiver( void )
{
    // Wait until TWI is ready for next transmission.
    while ( TWI_Transceiver_Busy() );
 38a:	06 b6       	in	r0, 0x36	; 54
 38c:	00 fc       	sbrc	r0, 0
 38e:	fd cf       	rjmp	.-6      	; 0x38a <TWI_Start_Transceiver>
    
    TWI_statusReg.all = 0;      
 390:	10 92 74 00 	sts	0x0074, r1
    TWI_state         = TWI_NO_STATE ;
 394:	88 ef       	ldi	r24, 0xF8	; 248
 396:	80 93 6b 00 	sts	0x006B, r24
    TWCR = (1<<TWEN)|                             // TWI Interface enabled.
 39a:	85 ec       	ldi	r24, 0xC5	; 197
 39c:	86 bf       	out	0x36, r24	; 54
           (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
           (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|       // Prepare to ACK next time the Slave is addressed.
           (0<<TWWC);                             //
}
 39e:	08 95       	ret

000003a0 <TWI_Get_Data_From_Transceiver>:
 * until the TWI_ISR has completed with the previous operation, before reading out the data
 * and returning. If there was an error in the previous transmission the function will return
 * the TWI State code.
 * ---------------------------------------------------------------------------------------------- */
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
 3a0:	ac 01       	movw	r20, r24
    unsigned char i;

    // Wait until TWI is ready for next transmission.
    while ( TWI_Transceiver_Busy() );
 3a2:	06 b6       	in	r0, 0x36	; 54
 3a4:	00 fc       	sbrc	r0, 0
 3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <TWI_Get_Data_From_Transceiver+0x2>

    // Last transmission competed successfully.
    if( TWI_statusReg.lastTransOK )              
 3a8:	80 91 74 00 	lds	r24, 0x0074
 3ac:	80 ff       	sbrs	r24, 0
 3ae:	14 c0       	rjmp	.+40     	; 0x3d8 <TWI_Get_Data_From_Transceiver+0x38>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <TWI_Get_Data_From_Transceiver+0x2a>
    {
        // Copy data from Transceiver buffer.
        for ( i=0; i<msgSize; i++ )
        {
            msg[i] = TWI_buf[i];
 3b6:	fa 01       	movw	r30, r20
 3b8:	e2 0f       	add	r30, r18
 3ba:	f3 1f       	adc	r31, r19
 3bc:	d9 01       	movw	r26, r18
 3be:	a9 58       	subi	r26, 0x89	; 137
 3c0:	bf 4f       	sbci	r27, 0xFF	; 255
 3c2:	8c 91       	ld	r24, X
 3c4:	80 83       	st	Z, r24
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255

    // Last transmission competed successfully.
    if( TWI_statusReg.lastTransOK )              
    {
        // Copy data from Transceiver buffer.
        for ( i=0; i<msgSize; i++ )
 3ca:	26 17       	cp	r18, r22
 3cc:	a0 f3       	brcs	.-24     	; 0x3b6 <TWI_Get_Data_From_Transceiver+0x16>
        {
            msg[i] = TWI_buf[i];
        }
        
        // Slave Receive data has been read from buffer.
        TWI_statusReg.RxDataInBuf = FALSE;
 3ce:	80 91 74 00 	lds	r24, 0x0074
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	80 93 74 00 	sts	0x0074, r24
 3d8:	80 91 74 00 	lds	r24, 0x0074
    }
    
    return TWI_statusReg.lastTransOK;                                   
}
 3dc:	81 70       	andi	r24, 0x01	; 1
 3de:	08 95       	ret

000003e0 <__vector_17>:
 * triggered; that is whenever a TWI event has occurred. This function should not be called
 * directly from the main application.
 * ---------------------------------------------------------------------------------------------- */
//SIGNAL(SIG_2WIRE_SERIAL) alter Aufruf
ISR(TWI_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
    static unsigned char TWI_bufPtr;
    
    switch (TWSR)
 3f2:	81 b1       	in	r24, 0x01	; 1
 3f4:	80 39       	cpi	r24, 0x90	; 144
 3f6:	f1 f1       	breq	.+124    	; 0x474 <__stack+0x15>
 3f8:	81 39       	cpi	r24, 0x91	; 145
 3fa:	40 f4       	brcc	.+16     	; 0x40c <__vector_17+0x2c>
 3fc:	80 37       	cpi	r24, 0x70	; 112
 3fe:	69 f1       	breq	.+90     	; 0x45a <__vector_17+0x7a>
 400:	80 38       	cpi	r24, 0x80	; 128
 402:	c1 f1       	breq	.+112    	; 0x474 <__stack+0x15>
 404:	80 36       	cpi	r24, 0x60	; 96
 406:	09 f0       	breq	.+2      	; 0x40a <__vector_17+0x2a>
 408:	47 c0       	rjmp	.+142    	; 0x498 <__stack+0x39>
 40a:	2c c0       	rjmp	.+88     	; 0x464 <__stack+0x5>
 40c:	88 3a       	cpi	r24, 0xA8	; 168
 40e:	59 f0       	breq	.+22     	; 0x426 <__vector_17+0x46>
 410:	89 3a       	cpi	r24, 0xA9	; 169
 412:	20 f4       	brcc	.+8      	; 0x41c <__vector_17+0x3c>
 414:	80 3a       	cpi	r24, 0xA0	; 160
 416:	09 f0       	breq	.+2      	; 0x41a <__vector_17+0x3a>
 418:	3f c0       	rjmp	.+126    	; 0x498 <__stack+0x39>
 41a:	41 c0       	rjmp	.+130    	; 0x49e <__stack+0x3f>
 41c:	88 3b       	cpi	r24, 0xB8	; 184
 41e:	29 f0       	breq	.+10     	; 0x42a <__vector_17+0x4a>
 420:	80 3c       	cpi	r24, 0xC0	; 192
 422:	d1 f5       	brne	.+116    	; 0x498 <__stack+0x39>
 424:	0e c0       	rjmp	.+28     	; 0x442 <__vector_17+0x62>
    {
        // Own SLA+R has been received; ACK has been returned
        case TWI_STX_ADR_ACK:
            // Set buffer pointer to first data location
            TWI_bufPtr   = 0;
 426:	10 92 76 00 	sts	0x0076, r1
    
        // Data byte in TWDR has been transmitted; ACK has been received
        case TWI_STX_DATA_ACK:
            TWDR = TWI_buf[TWI_bufPtr++];
 42a:	90 91 76 00 	lds	r25, 0x0076
 42e:	e9 2f       	mov	r30, r25
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	e9 58       	subi	r30, 0x89	; 137
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	80 81       	ld	r24, Z
 438:	83 b9       	out	0x03, r24	; 3
 43a:	9f 5f       	subi	r25, 0xFF	; 255
 43c:	90 93 76 00 	sts	0x0076, r25
 440:	29 c0       	rjmp	.+82     	; 0x494 <__stack+0x35>
            
        // Data byte in TWDR has been transmitted; NACK has been received.
        // I.e. this could be the end of the transmission.
        case TWI_STX_DATA_NACK:           
            // Have we transceived all expected data?
            if (TWI_bufPtr == TWI_msgSize) 
 442:	90 91 76 00 	lds	r25, 0x0076
 446:	80 91 75 00 	lds	r24, 0x0075
 44a:	98 17       	cp	r25, r24
 44c:	29 f5       	brne	.+74     	; 0x498 <__stack+0x39>
            {
                // Set status bits to completed successfully.
                TWI_statusReg.lastTransOK = TRUE; 
 44e:	80 91 74 00 	lds	r24, 0x0074
 452:	81 60       	ori	r24, 0x01	; 1
 454:	80 93 74 00 	sts	0x0074, r24
 458:	22 c0       	rjmp	.+68     	; 0x49e <__stack+0x3f>
                   (0<<TWWC);
           break;     
           
        // General call address has been received; ACK has been returned
        case TWI_SRX_GEN_ACK:
            TWI_statusReg.genAddressCall = TRUE;
 45a:	80 91 74 00 	lds	r24, 0x0074
 45e:	84 60       	ori	r24, 0x04	; 4
 460:	80 93 74 00 	sts	0x0074, r24
        // Own SLA+W has been received ACK has been returned
        case TWI_SRX_ADR_ACK:            
            // Dont need to clear TWI_S_statusRegister.generalAddressCall due to that it is the default state.
            TWI_statusReg.RxDataInBuf = TRUE;      
 464:	80 91 74 00 	lds	r24, 0x0074
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 93 74 00 	sts	0x0074, r24
            
            // Set buffer pointer to first data location
            TWI_bufPtr   = 0;
 46e:	10 92 76 00 	sts	0x0076, r1
 472:	10 c0       	rjmp	.+32     	; 0x494 <__stack+0x35>
        
    // Previously addressed with own SLA+W; data has been received; ACK has been returned
    // Previously addressed with general call; data has been received; ACK has been returned
    case TWI_SRX_ADR_DATA_ACK:
    case TWI_SRX_GEN_DATA_ACK:
        TWI_buf[TWI_bufPtr++] = TWDR;
 474:	80 91 76 00 	lds	r24, 0x0076
 478:	93 b1       	in	r25, 0x03	; 3
 47a:	e8 2f       	mov	r30, r24
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e9 58       	subi	r30, 0x89	; 137
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	90 83       	st	Z, r25
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 76 00 	sts	0x0076, r24
        
        // Set flag transmission successfull.
        TWI_statusReg.lastTransOK = TRUE;
 48a:	80 91 74 00 	lds	r24, 0x0074
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	80 93 74 00 	sts	0x0074, r24
        
        // Reset the TWI Interupt to wait for a new event.
        TWCR = (1<<TWEN)|                          // TWI Interface enabled
 494:	85 ec       	ldi	r24, 0xC5	; 197
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__stack+0x41>
    case TWI_STX_DATA_ACK_LAST_BYTE:
    // Bus error due to an illegal START or STOP condition
    case TWI_BUS_ERROR:
    default:
        // Store TWI State as errormessage, operation also clears the Success bit.
        TWI_state = TWSR;      
 498:	81 b1       	in	r24, 0x01	; 1
 49a:	80 93 6b 00 	sts	0x006B, r24
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	86 bf       	out	0x36, r24	; 54
               (0<<TWIE)|(0<<TWINT)|               // Disable Interupt
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
    }
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
